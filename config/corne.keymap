/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "layer_names.h"
#include "kp_mac.h"
#include "kp_windows.h"
#include "kp_media.h"

#define ____ &trans 
#define FLASH bootloader

/ {
        keymap {
                compatible = "zmk,keymap";

                base_layer {
                        label = "Base";
// -----------------------------------------------------------------------------------------
// |      |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |      |
// |      |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// |      |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |      |
//                    | TAB | RET | ESC |   | BSP | SPC  | DEL |
                        bindings = <
   ____  &kp Q   &kp W  &kp E          &kp R        &kp T        /**/  &kp Y         &kp U        &kp I      &kp O    &kp P     &to WIN_BASE
   ____  &MC_A   &MC_S  &MC_D          &MC_F        &kp G        /**/  &kp H         &MC_J        &MC_K      &MC_L    &MC_SEMI  &kp SQT
   ____  &kp Z   &kp X  &kp C          &kp V        &kp B        /**/  &kp N         &kp M        &kp COMMA  &kp DOT  &kp FSLH  ____
                        &lt MEDIA TAB  &lt NUM RET  &lt NAV ESC  /**/  &lt FUN BSPC  &lt SYM SPC  &kp DEL
                        >;
                };
                
                symbol_layer {
                        label="Symbol";

// -----------------------------------------------------------------------------------------
// |      | HAT |  &  |  #  |  ~  |  (  |   |  )  |      |     |     |     |      |
// |      |  `  |  |  |  !  |  ?  |  {  |   |  }  |  &&  | ||  | =>  |  '  |      |
// |      |BSLH |  @  |  $  |  £  |  [  |   |  ]  |      |     |     |     |      |
//                    |  _  |  -  |  "  |   |     |      |     |
                        bindings = <
   ____  &kp CARET        &kp AMPS &MC_HSH   &MC_TLD   &kp LPAR  /**/    &kp RPAR &kp M     ____         ____    ____    ____    
   ____  &kp GRAVE        &MC_PPE  &kp EXCL  &kp QMARK &kp LBRC  /**/    &kp RBRC &bool_and &bool_or_MC  &arrow  &kp SQT ____    
   ____  &kp NON_US_BSLH  &MC_AT   &kp DLLR  &MC_PND   &kp LBKT  /**/    &kp RBKT ____      ____         ____    ____    ____    
                                   &kp UNDER &kp MINUS &MC_DQT   /**/    ____     ____      ____    
                        >;
                };
                
                nav_layer {
                        label="Nav";
// -----------------------------------------------------------------------------------------
// |      |     |     |     |Zm In|ZmOut|   | c+B | Pwd  | Nwd | PGUP|     |      |
// |      |PrScr| CUT | COPY|PASTE|CAPS |   |  <  |  v   |  ^  |  >  |     |      |
// |      |Undo |     |     |     |     |   | c+F | Home | End | PgDN|     |      |
//                    |     |     |     |   |     |      |     |
                        bindings = <
   ____    ____    ____    ____    &MC_ZIN &MC_ZOT /**/    &kp LC(B)     &MC_PWD   &MC_NWD  &kp PG_UP  ____  ____  
   ____    &MC_PSC &MC_CUT &MC_CPY &MC_PST &kp CAPS/**/    &kp LEFT      &kp DOWN  &kp UP   &kp RIGHT  ____  ____   
   ____    &MC_UND ____    ____    ____    ____    /**/    &kp LC(F)     &kp HOME  &kp END  &kp PG_DN  ____  ____    
                           ____    ____    ____    /**/    &kp LA(BSPC)  ____      ____    
                        >;
                };
                
                win_base_layer {
                        label = "WBase";
// -----------------------------------------------------------------------------------------
// |      |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |      |
// |      |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// |      |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |      |
//                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
                        bindings = <
   ____  &kp Q   &kp W  &kp E          &kp R        &kp T        /**/  &kp Y         &kp U        &kp I      &kp O    &kp P     &to BASE
   ____  &WN_A   &WN_S  &WN_D          &WN_F        &kp G        /**/  &kp H         &WN_J        &WN_K      &WN_L    &WN_SEMI  &kp SQT
   ____  &kp Z   &kp X  &kp C          &kp V        &kp B        /**/  &kp N         &kp M        &kp COMMA  &kp DOT  &kp FSLH  ____
                        &lt MEDIA TAB  &lt NUM RET  &lt WIN_NAV ESC  /**/  &lt FUN BSPC  &lt WIN_SYM SPC  &kp DEL
                        >;
                };
                
                win_symbol_layer {
                        label="WSymbol";

// -----------------------------------------------------------------------------------------
// |      | HAT |  &  |  #  |  ~  |  (  |   |  )  |      |     |     |     |      |
// |      |  `  |  |  |  !  |  ?  |  {  |   |  }  |  &&  | ||  | =>  |  '  |      |
// |      |BSLH |  @  |  $  |  £  |  [  |   |  ]  |      |     |     |     |      |
//                    |  _  |  -  |  "  |   |     |      |     |
                        bindings = <
   ____  &kp CARET        &kp AMPS &WN_HSH   &WN_TLD   &kp LPAR  /**/    &kp RPAR &kp W     ____         ____    ____    ____    
   ____  &kp GRAVE        &WN_PPE  &kp EXCL  &kp QMARK &kp LBRC  /**/    &kp RBRC &bool_and &bool_or_WN  &arrow  &kp SQT ____    
   ____  &kp NON_US_BSLH  &WN_AT   &kp DLLR  &WN_PND   &kp LBKT  /**/    &kp RBKT ____      ____         ____    ____    ____    
                                   &kp UNDER &kp MINUS &WN_DQT   /**/    ____     ____      ____    
                        >;
                };
                
                win_nav_layer {
                        label="WNav";
// -----------------------------------------------------------------------------------------
// |      |     |     |     |Zm In|ZmOut|   | c+B | Pwd  | Nwd | PGUP|     |      |
// |      |PrScr| CUT | COPY|PASTE|CAPS |   |  <  |  v   |  ^  |  >  |     |      |
// |      |Undo |     |     |     |     |   | c+F | Home | End | PgDN|     |      |
//                    |     |     |     |   |     |      |     |
                        bindings = <
   ____    ____    ____    ____    &WN_ZIN &WN_ZOT    /**/    &kp LC(B)    &WN_PWD   &WN_NWD  &kp PG_UP  ____  ____  
   ____    &WN_PSC &WN_CUT &WN_CPY &WN_PST &caps_word /**/    &kp LEFT     &kp DOWN  &kp UP   &kp RIGHT  ____  ____   
   ____    &WN_UND ____    ____    ____    ____       /**/    &kp LC(F)    &kp HOME  &kp END  &kp PG_DN  ____  ____    
                           ____    ____    ____       /**/    &kp LC(BSPC) ____      ____    
                        >;
                };
                
                num_layer {
                        label="Num";
// -----------------------------------------------------------------------------------------
// |      |     |     |     |     |     |   |  *  |  7   |  8  |  9  |     |      |
// |      |     | WIN<| WIN^| WIN>|     |   |  +  |  4   |  5  |  6  |  /  |      |
// |      |     |     |     |     |     |   |  -  |  1   |  2  |  3  |  %  |      |
//                    |     |     |     |   |  =  |  0   |  .  |
                        bindings = <
   ____    ____    ____    ____    ____    ____    /**/    &kp STAR  &kp N7  &kp N8  &kp N9  ____       ____    
   ____    ____    &WN_WNL &WN_WNU &WN_WNR ____    /**/    &kp PLUS  &kp N4  &kp N5  &kp N6  &kp FSLH   ____    
   ____    ____    ____    ____    ____    ____    /**/    &kp MINUS &kp N1  &kp N2  &kp N3  &kp PRCNT ____    
                           ____    ____    ____    /**/    &kp EQUAL &kp N0  &kp DOT    
                        >;
                };
                
                fun_layer {
                        label="Func";
// -----------------------------------------------------------------------------------------
// |      |     | F9  | F10 | F11 | F12 |   |     |      |     |     |     |      |
// |      |     | F5  |  F6 |  F7 |  F8 |   |     |      |     |     |     |      |
// |      |     | F1  |  F2 |  F3 |  F4 |   |     |      |     |     |     |      |
//                    |     |     |     |   |     |      |     |
                        bindings = <
   ____   &kp F9  &kp F10 &kp F11 &kp F12 ____   /**/   ____    ____    ____    ____    ____    ____    
   ____   &kp F5  &kp F6  &kp F7  &kp F8  ____   /**/   ____    ____    ____    ____    ____    ____    
   ____   &kp F1  &kp F2  &kp F3  &kp F4  ____   /**/   ____    ____    ____    ____    ____    ____    
                          ____    ____    ____   /**/   ____    ____    ____    
                        >;
                };
                
                media_layer {
                        label="Media";
// -----------------------------------------------------------------------------------------
// | FLASH|     |     |     |     |     |   |     |      |     |     |     |      |
// |      |     |     |     |     |     |   |     |  <<  |  ^  |  v  |  >> |      |
// |BTCLR | BT0 | BT1 | BT2 |     |     |   |     |      |     |     |     |      |
//                    |     |     |     |   |Mute | Play | Stop|
                        bindings = <
   &FLASH ____   ____   ____   ____   ____   /**/    ____   ____  ____   ____  ____  ____    
   ____   ____   ____   ____   ____   ____   /**/    ____   &CPRV  &CVDN  &CVUP  &CNXT  ____    
   &BTCLR &BT0   &BT1   &BT2   ____   ____   /**/    ____   ____  ____   ____  ____    
                        ____   ____   ____   /**/    &MUTE  &CPP  &STOP    
                        >;
                };

                trans_layer {
                        label="Trans";
// -----------------------------------------------------------------------------------------
// |      |     |     |     |     |     |   |     |      |     |     |     |      |
// |      |     |     |     |     |     |   |     |      |     |     |     |      |
// |      |     |     |     |     |     |   |     |      |     |     |     |      |
//                    |     |     |     |   |     |      |     |
                        bindings = <
   ____    ____    ____    ____    ____    ____    /**/    ____    ____    ____    ____    ____    ____    
   ____    ____    ____    ____    ____    ____    /**/    ____    ____    ____    ____    ____    ____    
   ____    ____    ____    ____    ____    ____    /**/    ____    ____    ____    ____    ____    ____    
                           ____    ____    ____    /**/    ____    ____    ____    
                        >;
                };
                
        };
};

#define U_TAPPING_TERM 200

/ {
  behaviors {
    hm: homerow_mods {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MODS";
      #binding-cells = <2>;
      tapping_term_ms = <U_TAPPING_TERM>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
    };
    
    caps_word: behavior_caps_word {
      compatible = "zmk,behavior-caps-word";
      label = "CAPS_WORD";
      #binding-cells = <0>;
      continue-list = <UNDERSCORE MINUS BSPC>;
    };
  };
};

/ {
    macros {
        bool_and: bool_and {
            wait-ms = <0>;
            label = "ZM_bool_and";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = 
                 <&kp AMPS &kp AMPS>
                ;
        };

        bool_or_WN: bool_or_WN {
            wait-ms = <0>;
            label = "ZM_bool_or_wn";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = 
                 <&kp PIPE &kp PIPE2 &WN_PPE &kp LS(NON_US_BSLH) &kp TILDE &kp TILDE2>
                ;
        };

        bool_or_MC: bool_or_MC {
            wait-ms = <0>;
            label = "ZM_bool_or_mc";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = 
                 <&MC_PPE &MC_PPE>
                ;
        };
        
        arrow: arrow {
            wait-ms = <0>;
            label = "ZM_arrow";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = 
                 <&kp EQUAL &kp GT>
                ;
        };
    };
};